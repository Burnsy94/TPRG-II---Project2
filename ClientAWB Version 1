# TPRG II - Server / Client Assignment
# Alex Burns - 100885375
# Due December 14th, 2023


import socket #taken from week 9 Unicode and Networking
import sys
import json #taken from week 10 JSON data transfer
import os
from pathlib import Path
import PySimpleGUI as sg
import subprocess
import time

# Check if the platform is Raspberry Pi
IS_RPI = Path("/etc/rpi-issue").exists()
if not IS_RPI:
    print("This program is designed to run on a Raspberry Pi. Process ended with exit code 0.")
    sys.exit()

# Setup for the GUI LED
#Taken from week 9 Unicode and Networking
sg.theme('Light Brown 4')
CIRCLE = '●'  # Unicode symbol 9899
CIRCLE_OUTLINE = '○'  # Another unicode symbol 9898

def LED(color, key):
    """
    A user-defined element. This LED is based on a Text element.
    :param color: (str) The color of the LED
    :param key: (Any) The key used to look up the element, led Tag
    :return: (sg.Text) Returns a Text element that displays the circle
    """
    return sg.Text(CIRCLE_OUTLINE, text_color=color, key=key)

# Define the function to get vcgencmd data
# Taken from Assignment 2
def get_vcgencmd_data(iteration):
    """
    Collects data from Raspberry Pi's vcgencmds.
    Args:
        iteration (int): The current iteration count.
    Returns:
        dict: A dictionary containing vcgencmd data.
    """
    try: #Taken from Assignment 2
        temp = subprocess.getoutput('vcgencmd measure_temp').split('=')[1].split("'")[0]
        volts = subprocess.getoutput('vcgencmd measure_volts core').split('=')[1].split('V')[0]
        arm_freq = subprocess.getoutput('vcgencmd measure_clock arm').split('=')[1]
        codec_enabled = subprocess.getoutput('vcgencmd codec_enabled H264').split('=')[1]
        arm_mem = subprocess.getoutput('vcgencmd get_mem arm').split('=')[1].split('M')[0]

        # Format the data
        data = {
            "iteration": iteration,
            "temp": f"{float(temp):.1f}",
            "volts": f"{float(volts):.1f}",
            "arm_freq": arm_freq,
            "codec_enabled": codec_enabled,
            "arm_mem": arm_mem
        }
        return data
    except Exception as e:
        print(f"Error gathering data at iteration {iteration}: {e}")
        return None

# Layout of the GUI
layout = [
    [sg.Text('Status 1 '), LED('Green', '-LED-')],
    [sg.Button('Exit')]
]

# Create the window
window = sg.Window('Server', layout, font='Any 16', finalize=True)

# Establish a socket connection to the server
sock = socket.socket()
address = "192.168.2.18"  # Server address
port = 5000  # Server port

try:
    # Connect to the server
    sock.connect((address, port))
    window['-LED-'].update(CIRCLE, text_color='Green')

    # Main loop to read the GUI and send data
    for i in range(50):
        start_time = time.time()
        event, values = window.read(timeout=2000)  # Wait for 2 seconds
        if event in (sg.WIN_CLOSED, 'Exit'):
            break

        data = get_vcgencmd_data(i)
        if data is not None:
            jsonByte = json.dumps(data).encode('utf-8') #taken from week 10 JSON data transfer
            bytes_sent = sock.send(jsonByte)
            print(f"Iteration {i}: Sent {bytes_sent} bytes of {len(jsonByte)} bytes.")
        else:
            print(f"Skipping iteration {i} due to data gathering error.")
            
        end_time = time.time()
        print(f"Iteration {i} took {end_time - start_time:.2f} seconds")

except socket.error as err:
    print('Socket error because of %s' % (err))
except Exception as e:
    print(f"An error occurred: {e}")
finally:
    sock.close()
    window['-LED-'].update(CIRCLE_OUTLINE, text_color='Red')
    window.close()
    print("Process ended with exit code 0.")

# Code was run through ChatGPT at the end to correct any errors. Prompted by saying "Complete to run only on a
